::::Command Line Basics::::
What is the command line? way to interact with a computer 
How do you open the command line on your computer? ctr+alt+t
How can you navigate to a particular directory? cd <directoryName>
Where will cd on its own navigate you to? to the home directory
Where will cd .. navigate you to? one level above the current directory
How do you display the name of the directory you are currently in? pwd
How do you display the contents of the directory you are currently in? ls
How do you create a new directory? mkdir <directoryName>
How do you create a new file? touch <fileName>
How do you destroy a directory or file? rmdir <directoryName>
How do you rename a directory or file? mv
#######################################
::::Introduction to git::::
Github?
GitHub is a service that allows you to upload your code using Git and to manage your code with a nice web interface. GitHub and Git are not the same thing or even the same company.
------------------------
Steps to setup git:
git config --global user.name "Your Name"
git config --global user.email "yourname@example.com"
To verify things are working properly:
git config --get user.name
git config --get user.email
------------------------
Steps to create a SSH Key:
ssh-keygen -C <youremail>
cat ~/.ssh/id_rsa.pub
paste the ssh key in github and verify the connection using:
ssh -T git@github.com
------------------------
while git works on your local machine, github is a remote storage facility.
Git thinks of its data more like a series of snapshots of a miniature filesystem.
With Git, every time you commit, or save the state of your project, Git basically takes a picture of what all your files look like at that moment and stores a reference to that snapshot.
The mechanism that Git uses for this checksumming is called a SHA-1 hash.
This is a 40-character string composed of hexadecimal characters (0–9 and a–f) and calculated based on the contents of a file or directory structure in Git. 
Example: 24b9da6552252987aa493b52f8696cd6d3b00373
Git has three main states that your files can reside in: modified, staged, and committed:
Modified means that you have changed the file but have not committed it to your database yet.
Staged means that you have marked a modified file in its current version to go into your next commit snapshot.
Committed means that the data is safely stored in your local database.
The basic Git workflow goes something like this:
1.You modify files in your working tree.
2.You selectively stage just those changes you want to be part of your next commit, which adds only those changes to the staging area.
3.You do a commit, which takes the files as they are in the staging area and stores that snapshot permanently to your Git directory.
------------------------
What kind of program is Git? git is a distributed version control system DVCS
What are the differences between Git and a text editor in terms of what they save and their record keeping? A text editor can only make and save changes to a file.
Git tracks changes to the files and their contents over time.
Does Git work at a local or remote level? git works at local level
Does GitHub work at a local or remote level? GitHub works at a remote level
Why is Git useful for an individual developer? because it helps to experiment, it's much easier to reset
Why are Git and GitHub useful for a team of developers? because both helps to collaborate
#######################################
::::GIT BASICS::::
initialize a repository from existing code:
$ git init
------------------------
before first commit:
$ git status
------------------------
In staging area we can chose what we can commit.
------------------------
Add files to staging area:
$ git add -A
or, we can add individual files in staging area
------------------------
To revert back from staging area:
$ git reset
------------------------
Commit:
$ git commit -m "Initial commit"
------------------------
Cloning a remote repo:
$ git clone <url> <where to clone>
------------------------
Viewing information about the remote repository:
$ git remote -v
------------------------
List all the branches in the repository:
$ git branch -a
------------------------
List changes:
$ git diff
------------------------
Push:
1. get all the changes that are made in the remote repository's master brach:
$ git pull origin master
2. push to the origin master branch:
$ git push origin master
------------------------
Syntax to create a branch:
$ git branch <branch name>
------------------------
Switch to the created branch:
$ git checkout <branch name>
------------------------
What is the Git command used to get a full copy of an existing Git repository from Github? git clone <remote> <local>
What is the Git command used to check the status of your files? git status
What is the Git command used to track files with Git? git add
What is the Git command used to commit files? git commit -m ""
What is the Git command used to view your commit history? git log
What is the Git command used to upload projects onto GitHub? git push
Explain the two-stage system that Git uses to save files. staging and committing
Explain what origin is in git push origin master. ->origin is a placeholder name for the URL of the remote repository
Explain what master is in git push origin master. ->master is the remote branch where you want to push your changes
------------------------
A save in Git is divided into two terminal commands: add and commit. The combination of these two commands gives you control of exactly what you want to be remembered in your snapshot.
Staging: Think of add as adjusting the number of people or elements to be included in a photo. With Git, you can select the changes you want to save with git add. Imagine a project that contains multiple files where changes have been made to several files. You want to save some of the changes you have made and leave some other changes to continue working on them.
Committing: Think of commit as actually taking a photo, resulting in a snapshot. For example, to commit a file named README.md, type git commit -m "Add README.md". The -m flag stands for "message" and must always be followed by a commit message inside quotation marks. In this example, the commit message was "Add README.md".
#######################################
::::INTRODUCTION TO THE FRONT END::::
how the web page is STRUCTURED (HTML),
how it LOOKS (CSS), and how it FUNCTIONS (JavaScript).
Browser handles figuring out how to make these files into a functioning web page (not the server).
------------------------
Comments in HTML starts and end:
<!--
-->
------------------------
You can add images to your website by using the img element, and point to a specific image's URL using the src attribute.
<img src="https://www.your-image-source.com/your-image.jpg">
------------------------
All img elements must have an alt attribute. The text inside an alt attribute is used for screen readers to improve accessibility and is displayed if the image fails to load.
Note: If the image is purely decorative, using an empty alt attribute is a best practice.
<img src="https://www.your-image-source.com/your-image.jpg" alt="Author standing on a beach with two thumbs up.">
------------------------
You can use a (anchor) elements to link to content outside of your web page.
a elements need a destination web address called an href attribute. They also need anchor text. Here's an example:
<a href="https://freecodecamp.org">this links to freecodecamp.org</a>
------------------------
a (anchor) elements can also be used to create internal links to jump to different sections within a webpage.
Below is an example of an internal anchor link and its target element:

<a href="#contacts-header">Contacts</a>
...
<h2 id="contacts-header">Contacts</h2>
When users click the Contacts link, they'll be taken to the section of the webpage with the Contacts header element.
------------------------
Replace the href attribute value with a #, also known as a hash symbol, to create a dead link.
a href="#">this links to freecodecamp.org</a>
------------------------
You can make elements into links by nesting them within an a element.
Nest your image within an a element. Here's an example:
<a href="#"><img src="https://bit.ly/fcc-running-cats" alt="Three kittens running towards the camera."></a>
------------------------
Unordered lists start with an opening <ul> element, followed by any number of <li> elements. Finally, unordered lists close with a </ul>

For example:

<ul>
  <li>milk</li>
  <li>cheese</li>
</ul>
------------------------
Ordered lists start with an opening <ol> element, followed by any number of <li> elements. Finally, ordered lists are closed with the </ol> tag.

For example:

<ol>
  <li>Garfield</li>
  <li>Sylvester</li>
</ol>
------------------------
You can create a text input like this:

<input type="text">

Note that input elements are self-closing.
------------------------
You can create placeholder text like so:

<input type="text" placeholder="this is placeholder text">
------------------------
You can build web forms that actually submit data to a server using nothing more than pure HTML. You can do this by specifying an action on your form element.

For example:

<form action="/url-where-you-want-to-submit-form-data"></form>
------------------------
example submit button:

<button type="submit">this button submits the form</button>
------------------------
if you wanted to make a text input field required, you can just add the attribute required within your input element, like this:
<input type="text" required>
------------------------
example of a radio button:

<label> 
  <input type="radio" name="indoor-outdoor">Indoor 
</label>
------------------------
It is considered best practice to set a for attribute on the label element, with a value that matches the value of the id attribute of the input element. This allows assistive technologies to create a linked relationship between the label and the child input element. For example:

<label for="indoor"> 
  <input id="indoor" type="radio" name="indoor-outdoor">Indoor 
</label>
------------------------
All related radio buttons should have the same name attribute to create a radio button group. 
------------------------
Checkboxes are a type of input.

Each of your checkboxes can be nested within its own label element. By wrapping an input element inside of a label element it will automatically associate the checkbox input with the label element surrounding it.

All related checkbox inputs should have the same name attribute.

It is considered best practice to explicitly define the relationship between a checkbox input and its corresponding label by setting the for attribute on the label element to match the id attribute of the associated input element.

Here's an example of a checkbox:

<label for="loving"><input id="loving" type="checkbox" name="personality"> Loving</label>
------------------------
When a form gets submitted, the data is sent to the server and includes entries for the options selected. Inputs of type radio and checkbox report their values from the value attribute.

For example:

<label for="indoor"> 
  <input id="indoor" value="indoor" type="radio" name="indoor-outdoor">Indoor 
</label>
<label for="outdoor"> 
  <input id="outdoor" value="outdoor" type="radio" name="indoor-outdoor">Outdoor 
</label>
------------------------
You can set a checkbox or radio button to be checked by default using the checked attribute.

To do this, just add the word "checked" to the inside of an input element. For example:

<input type="radio" name="test-name" checked>
------------------------
At the top of your document, you need to tell the browser which version of HTML your page is using. HTML is an evolving language, and is updated regularly. Most major browsers support the latest specification, which is HTML5. However, older web pages may use previous versions of the language.

You tell the browser this information by adding the <!DOCTYPE ...> tag on the first line, where the ... part is the version of HTML. For HTML5, you use <!DOCTYPE html>.

The ! and uppercase DOCTYPE is important, especially for older browsers. The html is not case sensitive.

Next, the rest of your HTML code needs to be wrapped in html tags. The opening <html> goes directly below the <!DOCTYPE html> line, and the closing </html> goes at the end of the page.

Example:

<!DOCTYPE html>
<html>
  <!-- Your HTML code goes here -->
</html>
------------------------
You can add another level of organization in your HTML document within the html tags with the head and body elements. Any markup with information about your page would go into the head tag. Then any markup with the content of the page (what displays for a user) would go into the body tag.

Metadata elements, such as link, meta, title, and style, typically go inside the head element.

Here's an example of a page's layout:

<!DOCTYPE html>
<html>
  <head>
    <!-- metadata elements -->
  </head>
  <body>
    <!-- page contents -->
  </body>
</html>
------------------------
